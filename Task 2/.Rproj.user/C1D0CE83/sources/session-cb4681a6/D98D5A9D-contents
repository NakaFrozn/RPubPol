### PubPol 477/577 Session 6 - Getting Data Into R
### 14 September 2023

### We'll start with how to get data into memory in R

### Package install preamble (just using "Tidyverse" to speed things up for now)
install.packages("tidyverse")

### Importing Data

### Importing Data from Text
### We'll do it with the "base" R functions and with "readr" functions.

### Base R and readr do csv a bit differently. Take note of how they import the strings
### differently. You can customize the import with options, which I'll show you later.
### First, we need the "readr" package
library(readr)

### CSV files, base R
COMMAS <- read.csv("mpg.csv")

### CSV files, readr
COMMAS2 <- read_csv("mpg.csv")

View(COMMAS)
View(COMMAS2)

### Tab-delimited files work similar to CSV, with "read.delim" or "read_delim"
TABS <- read.delim("mpg.txt") # this is "base" R.
TABS2 <- read_delim("mpg.txt") # this is "readr".

### Each of these delimited file functions have additional options.
?read.delim
?read_delim

### In these functions, the additional arguments select what delimiter - how the data
### are separated - is used to split the data when reading the text file in.
### If you look carefully at the help file, you'll see that read.csv and read.delim
### are different defaults for the "read.table" function. The former defaults to a
### comma separator, the latter to a tab. (see sep = "," versus sep = "\t", where "\t"
### is the character for "tab".

### For fixed-width format (in "base" R)
FXDWDT <- read.fwf("16state35.txt", widths = c(14,3,12,2,2,2), col.names = c("govID",
                                                                             "itemcode", "amount", "svyyr", "datayr", "origin"))
### Note here that I split the command over two lines. You can do that when a bracket
### or command is underway. Otherwise, you can split across lines with a + at the end.

?read.fwf

### The read.fwf function works a bit differently, and doesn't look for specific characters
### on which to break, but rather splits the data into columns and rows after a certain
### number of characters.

### Fixed-width with readr
FXDWDT2 <- read_fwf("16state35.txt", fwf_cols(govID = 14, itemcode = 3, amount = 12,
                                              svyyr = 2, datayr = 2, origin = 2))
### I could have also specified start and end points for the columns, if I wanted to
### exclude some data from the read.

### For XLS (not XLSX) data with "readxl"
library(readxl)
XLSDATA <- read_excel("snackportions.xls")
### This data is a mess (thanks, Department of Ag), we need to adjust the command a bit
### and only select the needed cells. (A2:I22) - Open in Excel if you need to see why.

XLSDATA <- read_excel("snackportions.xls", range = "A2:I22")
### We can clean this up more, but we'll stop here for now

### For XLSX data (we need to ignore the first sheet!)
XLSXDATA <- read_excel("cornwell and rupert.xlsx", sheet = 2)
### We can also call sheets by name!
XLSXDATA <- read_excel("cornwell and rupert.xlsx", sheet = "cornwell&rupert")


### For Stata files, one option for import is the "foreign" package.
### It's a bit older, but is used a lot for exchange between software.
install.packages(foreign)
library(foreign)

### For Stata (dta) data, using "foreign"
STATA <- read.dta("StataViz1Final.dta") ## This errors out because "foreign"
### only works on older Stata files.

### DRAT. We need ANOTHER package - "readstata13" - for post-Stata 12 files.
install.packages("readstata13")
library(readstata13)
STATA <- read.dta13("StataViz1Final.dta")

### The "tidyverse" also contains a package for reading in other software data
### formats: "haven."


### For Stata using "haven" in tidyverse
library(haven)
STATA2 <- read_dta("StataViz1Final.dta")

### For SPSS (.sav) data with "foreign"
SPSS <- read.spss("p005.sav")

### Notice it imported them as a list. You can convert this to a data frame.
### See how coercing works here. ("as" data frame)
SPSS <- as.data.frame(SPSS)

### SPSS with "haven" in tidyverse
SPSS2 <- read_spss("p005.sav")

### SAS data with "haven" in tidyverse (we can't import with Foreign because we don't
### have SAS installed)
SAS <- read_sas("inflation.sas7bdat")

### All of these commands have options for tweaking. We needed to go fast today just to
### introduce them all. Help files are the place to go if things break. Many of these
### functions have options to deal with unexpected/unusual file details. There are two
### areas where you should pay attention: Check how text data are imported (as strings
### or factors) by invoking str() and looking at how the vector is identified. Also
### check if the number of columns and rows of your new data objects seem appropriate
### by checking the dimensions - dim() is a good start. We'll look at more summaries
### soon.

### In general, you can find a package which translates the data you have into something
### R can work with. But, you might need to install a package or two to get it done!